import nmap
import netifaces
import ipaddress

# A simple mapping of common ports to known vulnerabilities.
# This is just an example and not comprehensive or up-to-date.
known_vulnerabilities = {
    21: "FTP - Potential vulnerabilities depending on server version",
    22: "SSH - Check for weak credentials or outdated versions",
    23: "Telnet - Insecure protocol, easily intercepted",
    80: "HTTP - Check for vulnerable web applications",
    445: "SMB - Potential vulnerabilities like EternalBlue",
    3306: "MySQL - Potential for unauthorized access or SQL injection",
    3389: "RDP - Check for BlueKeep or other RDP vulnerabilities"
}

def get_network_range():
    interfaces = netifaces.interfaces()
    for interface in interfaces:
        addrs = netifaces.ifaddresses(interface)
        if netifaces.AF_INET in addrs:
            ipv4_info = addrs[netifaces.AF_INET][0]
            ip = ipv4_info['addr']
            netmask = ipv4_info['netmask']
            network = ipaddress.IPv4Network(f"{ip}/{netmask}", strict=False)
            return str(network)
    return None

def scan_network(subnet):
    nm = nmap.PortScanner()
    nm.scan(hosts=subnet, arguments='-sV')

    result_dict = {}
    for host in nm.all_hosts():
        host_info = {
            'state': nm[host].state(),
            'protocols': list(nm[host].all_protocols()),
            'ports': []
        }

        for protocol in nm[host].all_protocols():
            lport = nm[host][protocol].keys()
            for port in lport:
                port_info = {
                    'port': port,
                    'state': nm[host][protocol][port]['state'],
                    'name': nm[host][protocol][port]['name'],
                    'product': nm[host][protocol][port].get('product', ''),
                    'version': nm[host][protocol][port].get('version', ''),
                    'extrainfo': nm[host][protocol][port].get('extrainfo', ''),
                    'vulnerability': known_vulnerabilities.get(port, 'No known vulnerability')
                }
                host_info['ports'].append(port_info)

        result_dict[host] = host_info

    return result_dict

# Automatically determine network range and scan
network_range = get_network_range()
if network_range:
    print(f"Scanning network range: {network_range}")
    scan_results = scan_network(network_range)
    print(scan_results)
else:
    print("Could not determine network range.")
